
# .github/workflows/ci.yml
name: CI

on: [push, pull_request]

permissions:
  contents: write

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --no-interaction --without=DEV

      - name: Run Ruff
        run: |
          poetry run ruff format .
          poetry run ruff check --fix .

      - name: Commit
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git commit -m "Ruff Format" || true
          git push

      - name: Run Ruff Check
        run: poetry run ruff check .

      - name: Run Type Checker
        run: poetry run mypy

      - name: Run tests
        run: poetry run pytest tests

  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install poetry
        run: pip install poetry

      - name: Build Package
        run: poetry build

      - name: Get version from pyproject.toml
        id: get_version
        run: | 
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/bushido-${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: bushido-${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type:  application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



